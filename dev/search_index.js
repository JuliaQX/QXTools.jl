var documenterSearchIndex = {"docs":
[{"location":"users_guide/#User's-Guide","page":"User's Guide","title":"User's Guide","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"QXTools generates output files which provide a description of the computations and data required to perform a simulation. There are three output files:","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Parameter file: This YAML file provides information on the sampling method to use for the simulation\nDSL file: The DSL file contains instructions describing the tensor operations involved in","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"performing the simulation. Uses .qx suffix","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Data file: The data file contains the numerical values of the initial tensors of the tensor network","category":"page"},{"location":"users_guide/#Parallel-Processing","page":"User's Guide","title":"Parallel Processing","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"There are two levels of parallelism that are used to distribute computations over different processing elements. The highest level of parallism divides the set of output bitstrings among the available processing elements. The lower level of parallelism breaks each contraction into a sum of smaller contractions by slicing bonds of the tensor network. Slicing also reduces the total memory requirements and make it possible to perform contractions that would otherwise be intractable on a given system. However for each additional edge that is sliced, the network must be contracted for all possible values of the edge, leading to exponential growth in the number of contractions with the number of edges that are sliced. It is thus very important to choose the right edges to slice. This is a non trivial optimisation problem, but there exist many methods to which can find reasonable sets of edges to slice. In QXTools, the edges to slice are found when finding the contraciton plan which is handled by the QXGraphDecompositions package. Once the edges to select have been identified these appear as view commands in the DSL file, explained further below.","category":"page"},{"location":"users_guide/#Parameter-File","page":"User's Guide","title":"Parameter File","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The parameter file parameters for the sampling method used to select output bitstrings. The following example shows how an explicit list of 3 bitstrings can be provided.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"output:\n  method: List\n  params:\n    num_samples: 3\n    bitstrings:\n      - \"010\"\n      - \"101\"\n      - \"111\"","category":"page"},{"location":"users_guide/#DSL-Specification","page":"User's Guide","title":"DSL Specification","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"A Domain Specific Language (DSL) has been defined when enables better separation of concerns between components. This DSL describes a contraction over a tensor network to calculate observables of interest in the form of a sequence of instructions which act on individual tensors. This makes it possible to separate the development of the high performance distributed tensor network computation code from that of the higher level contraction planning, circuit and and network manipulation code. The \".qx\" suffix is used to identify these DSL files. We will first show a simple example of such a DSL file and then descibe each instruction in detail.","category":"page"},{"location":"users_guide/#Example-DSL-file","page":"User's Guide","title":"Example DSL file","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"An example of the DSL generated for the contraction of a two qubit GHZ circuit looks like.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"# version: 0.4.0\n# Determination of contraction plan:\n#   Method used: \"flow cutter\"\n#   Treewidth: 2\n#   Time allocated: 2\n#   Seed used: -1\n#   Returned metadata:\n#     1: \"c min degree heuristic\"\n#     2: \"c status 3 1627390755700\"\n#     3: \"c min shortcut heuristic\"\n#     4: \"c run with 0.0/0.1/0.2 min balance and node_min_expansion in endless loop with varying seed\"\n#   Hypergraph used: true\n#   Hyperedge contraction method: \"Netcon where possible, min fill heuristic otherwise.\"\n# Slicing:\n#   Method used: \"greedy treewidth deletion\"\n#   Edges sliced: 2\n#   Score fucntion used: direct_treewidth\n#   Treewidths after slicing consecutive edges:\n#     - 1\n#     - 0\n#\nload t5 data_1 2\nview t5_s t5 v2 1 2\nload t1 data_2 2,2\nview t1_s t1 v1 1 2\nload t4 data_1 2\nncon I2 1 t1_s 1,2 t4 2\nncon t8 1,2 t5_s 1 I2 2\nload t3 data_4 2\nview t3_s t3 v1 1 2\nncon t9 1,2 t8 1,2 t3_s 2\noutput t6 1 2\nview t6_s t6 v1 1 2\nncon t10 1,2 t9 1,2 t6_s 2\nload t2 data_3 2,2,2\nview t2_s t2 v1 3 2\nview t2_s_s t2_s v2 2 2\noutput t7 2 2\nncon I1 2,3 t2_s_s 1,2,3 t7 1\nncon t11 0 t10 1,2 I1 1,2\nsave output t11","category":"page"},{"location":"users_guide/#DSL-Format-and-Instructions","page":"User's Guide","title":"DSL Format and Instructions","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The DSL file is a regular ASCII text file with one instruction per line. Lines beginning with # are comments which are ignored (except for the first line which contains version information). The first line has a version string which specifies the format version. Comments following the first line contain metadata about the methods used to determine the contraction plan used and which edges to slice. We now go through each of the instructions in order of appearence.","category":"page"},{"location":"users_guide/#Load","page":"User's Guide","title":"Load","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Load instructions define a new tensor symbol using data from the input file. Here the first argument is the name of the new symbol, the second argument is the key to find the data at and the third argument is a comma separated list of dimensions of the tensor.","category":"page"},{"location":"users_guide/#View","page":"User's Guide","title":"View","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The view instruction creates a new tensor symbol by taking a view of an existing tensor. The first argument is the new symbol name, the second is the symbol of the tensor to take the view of, the third argument is the symbol used to identify the index, the fourth identifies the rank of the index of the tensor to slice and the final argument is the dimension of the bond. For example the instruction","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"view t5_s t5 v2 1 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"will create a new tensor labeled t5_s by taking a view on the tensor labeled t5 by setting the value of the first index to the value labeled by symbol v2. If t5_s, t5 and v2 were variables this would look something like","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"t5_s = t5[v2]","category":"page"},{"location":"users_guide/#Contraction","page":"User's Guide","title":"Contraction","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The ncon instruction specifies a pairwise contraction of tensors. An example contraction command is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"ncon I2 1 t1_s 1,2 t4 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Which indicates that the t1_s tensor should be contracted with the t4 tensor to get the I2 tensor. The contraction should be performed over the second rank of the t1_s tensor and first rank of the t4 tensor. Einstein summation notation is used for for specifying which indices to contract over. This convention uses repeated indices on the right hand side to indicate that those indices should be contracted over. In the above, the 2 index appears twice on the right hand side which indicates that this index should be contracted over. For the case where one of the tensors is a scalar, a 0 is used as a placeholder. For example if t1 is a scalar tensor and t2 is a matrix, the multiplication of the matrix by the scalar can be expressed as","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"ncon t3 1,2 t1 0 t2 1,2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Batched contractions (sometimes called hyper-contractions) are also supported. This is where the same index is repeated on the right hand side and also appears on the left hand side.","category":"page"},{"location":"users_guide/#Output","page":"User's Guide","title":"Output","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The output instruction marks tensors as corresponding to circuit outputs and provides their dimension. For example, the instruction","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"output t6 1 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"specifies that the tensor t6 will refer to the first output and that it has dimension 2.","category":"page"},{"location":"users_guide/#Save","page":"User's Guide","title":"Save","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The save instruction indicates that the given tensor is an output from the contraction and provides a label for this. The value of this tensor will then be used in a reduction operation and/or written to the output file.","category":"page"},{"location":"users_guide/#Data-File","page":"User's Guide","title":"Data File","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The data file is a JLD2 file and contains the numerical values of the initial tensors. Each tensor is stored as a multi-dimensional array with a data label that is referenced in load commands of the DSL file.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"MIT License","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Copyright (c) 2021 QuantEx team","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"QXTools is a Julia package and can be installed using Julia's inbuilt package manager from the Julia REPL using.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"import Pkg\nPkg.add(\"QXTools\")","category":"page"},{"location":"getting_started/#Example-usage","page":"Getting Started","title":"Example usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"An example of how QXTools can be used to calculate a set of amplitudes for small GHZ preparation circuit looks like","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using QXTools\nusing QXTools.Circuits\n\n# Create ghz circuit\ncirc = create_ghz_circuit(3)\n\n# Convert the circuit to a tensor network circuit\ntnc = convert_to_tnc(circ)\n\n# Find a good contraction plan\nplan = flow_cutter_contraction_plan(tnc; time=10)\n\n# Contract the network using this plan to find the given amplitude for different outputs\n@show QXTools.single_amplitude(tnc, plan, \"000\")\n@show QXTools.single_amplitude(tnc, plan, \"111\")\n@show QXTools.single_amplitude(tnc, plan, \"100\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only recommended for small test cases. For larger scale runs one can call the generate_simulation_files which will do the conversion to a network, find the contraction plan and create output files describing the required calculations. For example","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using QXTools\nusing QXTools.Circuits\n\n# Create ghz circuit\ncirc = create_ghz_circuit(3)\n\ngenerate_simulation_files(circ, \"ghz_3\", time=10)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"will generate the files:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ghz_3.qx: A DSL file with instructions\nghz_3.jld2: A data file with intitial tensors\nghz_3.yml: A parameter file with parameters controlling the simulation","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"These can be used as input to QXContexts to run the simulation on distributed clusters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QXTools","category":"page"},{"location":"#QXTools","page":"Home","title":"QXTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QXTools is a Julia package for simulating quantum circuits using tensor network approaches. It targets large distributed memory clusters with hardware accelerators. It was developed as part of the QuantEx project, one of the individual software projects of WP8 of PRACE 6IP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"QXTools ties together a number of other Julia packages which are also part of the QuantEx project. These include QXZoo for generating and manipulating quantum circuits, QXTns for representing and manipulating tensor networks, QXGraphDecompositions which implements a number of graph algorithms for finding good contraction plans and finally QXContexts which is designed to run on large distributed clusters and carry out the computations using input files generated using QXTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The design and implementation of QXTools and related packages was inspired by many other frameworks and packages including ITensors, TensorOperations.jl, OMEinsum.jl, Yao.jl, TAL-SH and ExaTN.","category":"page"},{"location":"#Where-to-begin","page":"Home","title":"Where to begin","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For getting QXTools installed and setup, see the Getting Started section which has instructions on how to install QXTools and some hello world examples. The \"Tutorials\" section contains some more in-depth examples and the \"Users Guide\" has more details of the design and structure of QXTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"users_guide.md\"]\nDepth = 2","category":"page"}]
}
